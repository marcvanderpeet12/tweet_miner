library(shinyjs)
install.packages("shinyjs")
library(shinyjs)
library(shiny)
library(shinyjs)
UI <- fluidPage(
fluidRow(
tabBox(
tabPanel("Scrape tweets",
#Set input
numericInput("test", "test", min = 1, max = 1)
)
)
)
)
Server <- function(input, output){}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
fluidRow(
tabBox(
tabPanel("Scrape tweets",
#Set input
numericInput("test", "test", min = 1, max = 1)
)
)
)
)
Server <- function(input, output){}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
fluidRow(
tabBox(
tabPanel("Scrape tweets",
#Set input
#numericInput("test", "test", min = 1, max = 1)
)
)
)
)
Server <- function(input, output){}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
fluidRow(
)
)
Server <- function(input, output){}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
fluidRow(
numericInput("test1", "test2", min = 1, max = 10)
)
)
Server <- function(input, output){}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
fluidRow(
mainPanel(
numericInput("test1", "test2", min = 1, max = 10)
)
)
)
Server <- function(input, output){}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
mainPanel(
numericInput("test1", "test2", min = 1, max = 10)
)
)
Server <- function(input, output){}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
numericInput("test1", "test2", 10, min = 1, max = 10)
)
Server <- function(input, output){}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
get_connected <- reactive({
#connect
})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText("You're now connected to the API")
}
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
get_connected <- reactive({
#connect
})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
}
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
#get_connected <- reactive({
#connect
#})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", min = 10, max = 1000),
selectInput("tweet_name", "Select the tweeter", choices = c("rRealDonaldTrump"))
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
#get_connected <- reactive({
#connect
#})
scrape_tweets <- reactive({
S = 200, N = input$tweet_amount, lats_NY <- c(40.7), long_NY <- c(-73.9)
geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mil="), sep =",")
tweets_NY <- searchTwitter(input$tweet_name, lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
return(N)
})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", min = 10, max = 1000),
selectInput("tweet_name", "Select the tweeter", choices = c("rRealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
#get_connected <- reactive({
#connect
#})
scrape_tweets <- reactive({
S = 200, N = input$tweet_amount, lats_NY <- c(40.7), long_NY <- c(-73.9)
geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mil="), sep =",")
tweets_NY <- searchTwitter(input$tweet_name, lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
return(N)
})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", min = 10, max = 1000),
selectInput("tweet_name", "Select the tweeter", choices = c("rRealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
#get_connected <- reactive({
#connect
#})
scrape_tweets <- reactive({
S = 200, N = input$tweet_amount, lats_NY <- c(40.7), long_NY <- c(-73.9)
geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mil="), sep =",")
tweets_NY <- searchTwitter(input$tweet_name, lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
return(N)
})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", min = 10, max = 1000),
selectInput("tweet_name", "Select the tweeter", choices = c("rRealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
#get_connected <- reactive({
#connect
#})
scrape_tweets <- reactive({
S = 200, N = input$tweet_amount, lats_NY <- c(40.7), long_NY <- c(-73.9)
geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mil="), sep =",")
tweets_NY <- searchTwitter(input$tweet_name, lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
return(N)
})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", min = 10, max = 1000),
selectInput("tweet_name", "Select the tweeter", choices = c("rRealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
#get_connected <- reactive({
#connect
#})
#scrape_tweets <- reactive({
#  S = 200, N = input$tweet_amount, lats_NY <- c(40.7), long_NY <- c(-73.9)
#  geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mil="), sep =",")
#  tweets_NY <- searchTwitter(input$tweet_name, lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
#  return(N)
#})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", min = 10, max = 1000),
selectInput("tweet_name", "Select the tweeter", selected = NULL, choices = c("rRealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
#get_connected <- reactive({
#connect
#})
#scrape_tweets <- reactive({
#  S = 200, N = input$tweet_amount, lats_NY <- c(40.7), long_NY <- c(-73.9)
#  geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mil="), sep =",")
#  tweets_NY <- searchTwitter(input$tweet_name, lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
#  return(N)
#})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", min = 10, max = 1000),
#selectInput("tweet_name", "Select the tweeter", selected = NULL, choices = c("rRealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
#get_connected <- reactive({
#connect
#})
#scrape_tweets <- reactive({
#  S = 200, N = input$tweet_amount, lats_NY <- c(40.7), long_NY <- c(-73.9)
#  geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mil="), sep =",")
#  tweets_NY <- searchTwitter(input$tweet_name, lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
#  return(N)
#})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", min = 10, max = 1000),
#selectInput("tweet_name", "Select the tweeter", selected = NULL, choices = c("rRealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
#get_connected <- reactive({
#connect
#})
#scrape_tweets <- reactive({
#  S = 200, N = input$tweet_amount, lats_NY <- c(40.7), long_NY <- c(-73.9)
#  geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mil="), sep =",")
#  tweets_NY <- searchTwitter(input$tweet_name, lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
#  return(N)
#})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", 10, min = 10, max = 1000),
#selectInput("tweet_name", "Select the tweeter", selected = NULL, choices = c("rRealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
#get_connected <- reactive({
#connect
#})
#scrape_tweets <- reactive({
#  S = 200, N = input$tweet_amount, lats_NY <- c(40.7), long_NY <- c(-73.9)
#  geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mil="), sep =",")
#  tweets_NY <- searchTwitter(input$tweet_name, lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
#  return(N)
#})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", 10, min = 10, max = 1000),
selectInput("tweet_name", "Select the tweeter", selected = NULL, choices = c("rRealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
#get_connected <- reactive({
#connect
#})
#scrape_tweets <- reactive({
#  S = 200, N = input$tweet_amount, lats_NY <- c(40.7), long_NY <- c(-73.9)
#  geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mil="), sep =",")
#  tweets_NY <- searchTwitter(input$tweet_name, lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
#  return(N)
#})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
runApp()
runApp()
list <- c(1,2,3)
for(l in list){print l}
for(l in length(list)){print l}
for(l in length(list)){print l}
for(i in 1:length(list)){
Sys.sleep(2)
}
for(i in 1:length(list)){
Sys.sleep(2)
}
list = list(1,2,3)
list
for(i in 1:length(list)){
Sys.sleep(2)
}
list[1]
list = c(1,2,3)
list
list[1]
for(i in 1:length(list)){
Sys.sleep(2)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
