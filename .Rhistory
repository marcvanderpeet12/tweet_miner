geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mil="), sep =",")
tweets_NY <- searchTwitter(input$tweet_name, lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
return(N)
})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", min = 10, max = 1000),
selectInput("tweet_name", "Select the tweeter", choices = c("rRealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
#get_connected <- reactive({
#connect
#})
scrape_tweets <- reactive({
S = 200, N = input$tweet_amount, lats_NY <- c(40.7), long_NY <- c(-73.9)
geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mil="), sep =",")
tweets_NY <- searchTwitter(input$tweet_name, lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
return(N)
})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", min = 10, max = 1000),
selectInput("tweet_name", "Select the tweeter", choices = c("rRealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
#get_connected <- reactive({
#connect
#})
scrape_tweets <- reactive({
S = 200, N = input$tweet_amount, lats_NY <- c(40.7), long_NY <- c(-73.9)
geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mil="), sep =",")
tweets_NY <- searchTwitter(input$tweet_name, lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
return(N)
})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", min = 10, max = 1000),
selectInput("tweet_name", "Select the tweeter", choices = c("rRealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
#get_connected <- reactive({
#connect
#})
#scrape_tweets <- reactive({
#  S = 200, N = input$tweet_amount, lats_NY <- c(40.7), long_NY <- c(-73.9)
#  geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mil="), sep =",")
#  tweets_NY <- searchTwitter(input$tweet_name, lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
#  return(N)
#})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", min = 10, max = 1000),
selectInput("tweet_name", "Select the tweeter", selected = NULL, choices = c("rRealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
#get_connected <- reactive({
#connect
#})
#scrape_tweets <- reactive({
#  S = 200, N = input$tweet_amount, lats_NY <- c(40.7), long_NY <- c(-73.9)
#  geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mil="), sep =",")
#  tweets_NY <- searchTwitter(input$tweet_name, lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
#  return(N)
#})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", min = 10, max = 1000),
#selectInput("tweet_name", "Select the tweeter", selected = NULL, choices = c("rRealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
#get_connected <- reactive({
#connect
#})
#scrape_tweets <- reactive({
#  S = 200, N = input$tweet_amount, lats_NY <- c(40.7), long_NY <- c(-73.9)
#  geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mil="), sep =",")
#  tweets_NY <- searchTwitter(input$tweet_name, lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
#  return(N)
#})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", min = 10, max = 1000),
#selectInput("tweet_name", "Select the tweeter", selected = NULL, choices = c("rRealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
#get_connected <- reactive({
#connect
#})
#scrape_tweets <- reactive({
#  S = 200, N = input$tweet_amount, lats_NY <- c(40.7), long_NY <- c(-73.9)
#  geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mil="), sep =",")
#  tweets_NY <- searchTwitter(input$tweet_name, lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
#  return(N)
#})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", 10, min = 10, max = 1000),
#selectInput("tweet_name", "Select the tweeter", selected = NULL, choices = c("rRealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
#get_connected <- reactive({
#connect
#})
#scrape_tweets <- reactive({
#  S = 200, N = input$tweet_amount, lats_NY <- c(40.7), long_NY <- c(-73.9)
#  geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mil="), sep =",")
#  tweets_NY <- searchTwitter(input$tweet_name, lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
#  return(N)
#})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
library(shinydashboard)
UI <- fluidPage(
actionButton("get_tweets", "Fetch tweets"),
numericInput("tweet_amount", "Set the amount of Tweets", 10, min = 10, max = 1000),
selectInput("tweet_name", "Select the tweeter", selected = NULL, choices = c("rRealDonaldTrump")),
#Set hidden buttons
hidden(
div(id="status_update",
verbatimTextOutput("status")
)
)
)
Server <- function(input, output){
#get_connected <- reactive({
#connect
#})
#scrape_tweets <- reactive({
#  S = 200, N = input$tweet_amount, lats_NY <- c(40.7), long_NY <- c(-73.9)
#  geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mil="), sep =",")
#  tweets_NY <- searchTwitter(input$tweet_name, lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
#  return(N)
#})
observeEvent(input$get_tweets, {
#Connect to the API
toggle("status_update")
output$status <- renderText({"You're now connected to the API"})
})
}
shinyApp(ui = UI, server = Server)
runApp()
runApp()
list <- c(1,2,3)
for(l in list){print l}
for(l in length(list)){print l}
for(l in length(list)){print l}
for(i in 1:length(list)){
Sys.sleep(2)
}
for(i in 1:length(list)){
Sys.sleep(2)
}
list = list(1,2,3)
list
for(i in 1:length(list)){
Sys.sleep(2)
}
list[1]
list = c(1,2,3)
list
list[1]
for(i in 1:length(list)){
Sys.sleep(2)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinyjs)
UI <- fluidPage(
actionButton("action", "RUN")
)
Server <- function(input, output){}
Shinyapp(ui = UI, server = Server)
library(shiny)
library(shinyjs)
UI <- fluidPage(
actionButton("action", "RUN")
)
Server <- function(input, output){}
ShinyApp(ui = UI, server = Server)
library(shinyjs)
library(shiny)
ui <- fluidPage(
actionButton("action", "RUN")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shinyjs)
library(shiny)
ui <- fluidPage(
useShinyjs(),
actionButton("action", "RUN")
)
server <- function(input, output, session) {
observe({
shinyjs::hide("action")
})
if(a_function())
shinyjs::show("action")
})
}
shinyApp(ui, server)
library(shinyjs)
library(shiny)
ui <- fluidPage(
useShinyjs(),
actionButton("action", "RUN")
)
server <- function(input, output, session) {
observe({
shinyjs::hide("action")
})
if(a_function())
shinyjs::show("action")
})
}
shinyApp(ui, server)
library(shinyjs)
library(shiny)
ui <- fluidPage(
useShinyjs(),
actionButton("action", "RUN")
)
server <- function(input, output, session) {
var = TRUE
observe({
shinyjs::hide("action")
})
if(var = FALSE)
shinyjs::show("action")
})
}
shinyApp(ui, server)
library(shinyjs)
library(shiny)
ui <- fluidPage(
useShinyjs(),
actionButton("action", "RUN")
)
server <- function(input, output, session) {
var = TRUE
observe({
shinyjs::hide("action")
})
if(var == FALSE)
shinyjs::show("action")
})
}
shinyApp(ui, server)
library(shinyjs)
library(shiny)
ui <- fluidPage(
useShinyjs(),
actionButton("action", "RUN")
)
server <- function(input, output, session) {
var <- TRUE
observe({
shinyjs::hide("action")
})
if(var == FALSE)
shinyjs::show("action")
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
S = 200
N = 2
lats_NY <- c(40.7)
long_NY <- c(-73.9)
geocode_NY <- paste(lats_NY[1], long_NY[1], paste0(S, "mi"), sep = ",")
tweets_NY = searchTwitter("@realDonaldTrump" , lang = "en", n = N, resultType = "recent", geocode = geocode_NY)
tweets_NY
nrow(tweets_NY)
length(tweets_NY)
runApp()
donaldtext <- sapply(tweets_NY, function(x) x$getText())
donaldtext = unlist(donaldtext)
donaldtext
df = data.frame(text = donaldtext)
df
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
tabsetPanel(
tabPanel("Tab 1",
actionButton("switch_tab", "Go to the second tab"),
),
tabPanel("Tab 2", "there!"),
tabPanel("Tab 3", "there!"))
)
server <- function(input, output) {
observeEvent(input$switch_tab, {
updateTabsetPanel(session, "inTabset",
selected = "Tab 2")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
tabsetPanel(
tabPanel("Tab 1",
actionButton("switch_tab", "Go to the second tab")
),
tabPanel("Tab 2", "there!"),
tabPanel("Tab 3", "there!"))
)
server <- function(input, output) {
observeEvent(input$switch_tab, {
updateTabsetPanel(session, "inTabset",
selected = "Tab 2")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
tabsetPanel(
tabPanel("Tab 1",
actionButton("switch_tab", "Go to the second tab")
),
tabPanel("Tab 2", "there!"),
tabPanel("Tab 3", "there!"))
)
server <- function(input, output, session) {
observeEvent(input$switch_tab, {
updateTabsetPanel(session, "inTabset",
selected = "Tab 2")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
tabsetPanel(
tabPanel("Tab 1",
actionButton("switch_tab", "Go to the second tab")
),
tabPanel("Tab 2", "there!"),
tabPanel("Tab 3", "there!"))
)
server <- function(input, output, session) {
observeEvent(input$switch_tab, {
updateTabsetPanel(session, "inTabset",
selected = "Tab 2")
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
tabsetPanel(
tabPanel("Tab 1",
actionButton("switch_tab", "Go to the second tab")
),
tabPanel("Tab 2", "there!"),
tabPanel("Tab 3", "there!"))
)
server <- function(input, output, session) {
observeEvent(input$switch_tab, {
updateTabsetPanel(session, "inTabset",
selected = "Tab 3")
})
}
shinyApp(ui = ui, server = server)
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
